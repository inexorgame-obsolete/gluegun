// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYERBUFFER_PLAYERMODULE_H_
#define FLATBUFFERS_GENERATED_PLAYERBUFFER_PLAYERMODULE_H_

#include "flatbuffers/flatbuffers.h"

namespace PlayerModule {

struct PlayerBuffer;

struct PlayerBuffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_KILLS = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int16_t kills() const {
    return GetField<int16_t>(VT_KILLS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int16_t>(verifier, VT_KILLS) &&
           verifier.EndTable();
  }
};

struct PlayerBufferBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(PlayerBuffer::VT_NAME, name);
  }
  void add_kills(int16_t kills) {
    fbb_.AddElement<int16_t>(PlayerBuffer::VT_KILLS, kills, 0);
  }
  explicit PlayerBufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlayerBufferBuilder &operator=(const PlayerBufferBuilder &);
  flatbuffers::Offset<PlayerBuffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlayerBuffer>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlayerBuffer> CreatePlayerBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int16_t kills = 0) {
  PlayerBufferBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_kills(kills);
  return builder_.Finish();
}

inline flatbuffers::Offset<PlayerBuffer> CreatePlayerBufferDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int16_t kills = 0) {
  return PlayerModule::CreatePlayerBuffer(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      kills);
}

inline const PlayerModule::PlayerBuffer *GetPlayerBuffer(const void *buf) {
  return flatbuffers::GetRoot<PlayerModule::PlayerBuffer>(buf);
}

inline const PlayerModule::PlayerBuffer *GetSizePrefixedPlayerBuffer(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<PlayerModule::PlayerBuffer>(buf);
}

inline bool VerifyPlayerBufferBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PlayerModule::PlayerBuffer>(nullptr);
}

inline bool VerifySizePrefixedPlayerBufferBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PlayerModule::PlayerBuffer>(nullptr);
}

inline void FinishPlayerBufferBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PlayerModule::PlayerBuffer> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerBufferBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<PlayerModule::PlayerBuffer> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace PlayerModule

#endif  // FLATBUFFERS_GENERATED_PLAYERBUFFER_PLAYERMODULE_H_
