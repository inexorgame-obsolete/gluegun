// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DISTRIBUTEDSTATEADDRESS_DISTRIBUTED_STATE_H_
#define FLATBUFFERS_GENERATED_DISTRIBUTEDSTATEADDRESS_DISTRIBUTED_STATE_H_

#include "flatbuffers/flatbuffers.h"

namespace distributed_state {

struct Address;
struct AddressT;

bool operator==(const AddressT &lhs, const AddressT &rhs);

inline const flatbuffers::TypeTable *AddressTypeTable();

struct AddressT : public flatbuffers::NativeTable {
  typedef Address TableType;
  int16_t creator_id;
  int16_t object_id;
  AddressT()
      : creator_id(0),
        object_id(0) {
  }
};

inline bool operator==(const AddressT &lhs, const AddressT &rhs) {
  return
      (lhs.creator_id == rhs.creator_id) &&
      (lhs.object_id == rhs.object_id);
}

struct Address FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AddressT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return AddressTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CREATOR_ID = 4,
    VT_OBJECT_ID = 6
  };
  int16_t creator_id() const {
    return GetField<int16_t>(VT_CREATOR_ID, 0);
  }
  bool mutate_creator_id(int16_t _creator_id) {
    return SetField<int16_t>(VT_CREATOR_ID, _creator_id, 0);
  }
  int16_t object_id() const {
    return GetField<int16_t>(VT_OBJECT_ID, 0);
  }
  bool mutate_object_id(int16_t _object_id) {
    return SetField<int16_t>(VT_OBJECT_ID, _object_id, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_CREATOR_ID) &&
           VerifyField<int16_t>(verifier, VT_OBJECT_ID) &&
           verifier.EndTable();
  }
  AddressT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AddressT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Address> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AddressT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AddressBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_creator_id(int16_t creator_id) {
    fbb_.AddElement<int16_t>(Address::VT_CREATOR_ID, creator_id, 0);
  }
  void add_object_id(int16_t object_id) {
    fbb_.AddElement<int16_t>(Address::VT_OBJECT_ID, object_id, 0);
  }
  explicit AddressBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddressBuilder &operator=(const AddressBuilder &);
  flatbuffers::Offset<Address> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Address>(end);
    return o;
  }
};

inline flatbuffers::Offset<Address> CreateAddress(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t creator_id = 0,
    int16_t object_id = 0) {
  AddressBuilder builder_(_fbb);
  builder_.add_object_id(object_id);
  builder_.add_creator_id(creator_id);
  return builder_.Finish();
}

flatbuffers::Offset<Address> CreateAddress(flatbuffers::FlatBufferBuilder &_fbb, const AddressT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline AddressT *Address::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new AddressT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Address::UnPackTo(AddressT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = creator_id(); _o->creator_id = _e; };
  { auto _e = object_id(); _o->object_id = _e; };
}

inline flatbuffers::Offset<Address> Address::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AddressT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAddress(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Address> CreateAddress(flatbuffers::FlatBufferBuilder &_fbb, const AddressT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AddressT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _creator_id = _o->creator_id;
  auto _object_id = _o->object_id;
  return distributed_state::CreateAddress(
      _fbb,
      _creator_id,
      _object_id);
}

inline const flatbuffers::TypeTable *AddressTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SHORT, 0, -1 },
    { flatbuffers::ET_SHORT, 0, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const distributed_state::Address *GetAddress(const void *buf) {
  return flatbuffers::GetRoot<distributed_state::Address>(buf);
}

inline const distributed_state::Address *GetSizePrefixedAddress(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<distributed_state::Address>(buf);
}

inline Address *GetMutableAddress(void *buf) {
  return flatbuffers::GetMutableRoot<Address>(buf);
}

inline bool VerifyAddressBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<distributed_state::Address>(nullptr);
}

inline bool VerifySizePrefixedAddressBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<distributed_state::Address>(nullptr);
}

inline void FinishAddressBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<distributed_state::Address> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAddressBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<distributed_state::Address> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<AddressT> UnPackAddress(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<AddressT>(GetAddress(buf)->UnPack(res));
}

}  // namespace distributed_state

#endif  // FLATBUFFERS_GENERATED_DISTRIBUTEDSTATEADDRESS_DISTRIBUTED_STATE_H_
