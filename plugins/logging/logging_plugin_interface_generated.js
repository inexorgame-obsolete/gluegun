// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var inexorgame = inexorgame || {};

/**
 * @const
 * @namespace
 */
inexorgame.logging = inexorgame.logging || {};

/**
 * @const
 * @namespace
 */
inexorgame.plugin = inexorgame.plugin || {};

/**
 * Describes which level of severity you are logging.
 *
 * @enum
 */
inexorgame.logging.LogLevel = {
  /**
   * This is really fine-grained information—finer even than DEBUG.
   */
  Trace: 0,

  /**
   * With DEBUG, you start to include more granular, diagnostic information.
   */
  Debug: 1,

  /**
   * INFO messages correspond to normal application behavior.
   */
  Info: 2,

  /**
   * You use the WARN log level to indicate that you might have a problem and that you’ve detected an unusual situation.
   */
  Warn: 3,

  /**
   * An error is a serious issue and represents the failure of something important going on in your application.
   */
  Error: 4,

  /**
   * Fatal represents truly catastrophic situations.
   */
  Fatal: 5,

  /**
   * Disable all logging. You're on your own now.
   */
  Off: 127
};

/**
 * Possible log signals
 *
 * @enum
 */
inexorgame.logging.LogSignals = {
  /**
   * Logs a message to the default log output
   */
  LogMessageToDefault: 0
};

/**
 * @enum
 */
inexorgame.logging.MessageType = {
  NONE: 0,
  inexorgame_plugin_PluginMessage: 1,
  LogMessage: 2
};

/**
 * A log message contains severity and content
 *
 * @constructor
 */
inexorgame.logging.LogMessage = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {inexorgame.logging.LogMessage}
 */
inexorgame.logging.LogMessage.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {inexorgame.logging.LogMessage=} obj
 * @returns {inexorgame.logging.LogMessage}
 */
inexorgame.logging.LogMessage.getRootAsLogMessage = function(bb, obj) {
  return (obj || new inexorgame.logging.LogMessage).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {inexorgame.logging.LogLevel}
 */
inexorgame.logging.LogMessage.prototype.severity = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {inexorgame.logging.LogLevel} */ (this.bb.readInt8(this.bb_pos + offset)) : inexorgame.logging.LogLevel.Trace;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
inexorgame.logging.LogMessage.prototype.content = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
inexorgame.logging.LogMessage.startLogMessage = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {inexorgame.logging.LogLevel} severity
 */
inexorgame.logging.LogMessage.addSeverity = function(builder, severity) {
  builder.addFieldInt8(0, severity, inexorgame.logging.LogLevel.Trace);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} contentOffset
 */
inexorgame.logging.LogMessage.addContent = function(builder, contentOffset) {
  builder.addFieldOffset(1, contentOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
inexorgame.logging.LogMessage.endLogMessage = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
inexorgame.logging.Message = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {inexorgame.logging.Message}
 */
inexorgame.logging.Message.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {inexorgame.logging.Message=} obj
 * @returns {inexorgame.logging.Message}
 */
inexorgame.logging.Message.getRootAsMessage = function(bb, obj) {
  return (obj || new inexorgame.logging.Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {inexorgame.logging.MessageType}
 */
inexorgame.logging.Message.prototype.logMessageType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {inexorgame.logging.MessageType} */ (this.bb.readUint8(this.bb_pos + offset)) : inexorgame.logging.MessageType.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
inexorgame.logging.Message.prototype.logMessage = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
inexorgame.logging.Message.startMessage = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {inexorgame.logging.MessageType} logMessageType
 */
inexorgame.logging.Message.addLogMessageType = function(builder, logMessageType) {
  builder.addFieldInt8(0, logMessageType, inexorgame.logging.MessageType.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} logMessageOffset
 */
inexorgame.logging.Message.addLogMessage = function(builder, logMessageOffset) {
  builder.addFieldOffset(1, logMessageOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
inexorgame.logging.Message.endMessage = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
inexorgame.logging.Message.finishMessageBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.inexorgame = inexorgame;
